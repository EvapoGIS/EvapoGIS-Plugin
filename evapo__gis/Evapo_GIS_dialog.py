# -*- coding: utf-8 -*-
"""
/***************************************************************************
 EvapotranspirationDialog
                                 A QGIS plugin
 EvapoGIS is a plugin developed based on the Surface Energy Balance Algorithm for Land (SEBAL).
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-08-10
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Lorena de Moura, Nicolas Lucas
        email                : nics.msi20@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Evapo_GIS_dialog_base.ui'))


class EvapotranspirationDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(EvapotranspirationDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QLabel, QPushButton, QLineEdit, QWidget

class YourPluginInterface(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Seu Plugin QGIS")
        self.setGeometry(100, 100, 400, 300)

        main_widget = QWidget()
        self.setCentralWidget(main_widget)

        layout = QVBoxLayout()
        main_widget.setLayout(layout)

        self.wind_speed_label = QLabel("Wind Speed (m/s):")
        self.wind_speed_input = QLineEdit()
        layout.addWidget(self.wind_speed_label)
        layout.addWidget(self.wind_speed_input)

        self.etoi_label = QLabel("Reference Evapotranspiration (EToi) - mm:")
        self.etoi_input = QLineEdit()
        layout.addWidget(self.etoi_label)
        layout.addWidget(self.etoi_input)

        self.eto_label = QLabel("Reference Evapotranspiration (ETo) - mm:")
        self.eto_input = QLineEdit()
        layout.addWidget(self.eto_label)
        layout.addWidget(self.eto_input)

        self.process_button = QPushButton("Processar")
        self.process_button.clicked.connect(self.process_data)
        layout.addWidget(self.process_button)

    def process_data(self):
        wind_speed = float(self.wind_speed_input.text())
        etoi = float(self.etoi_input.text())
        eto = float(self.eto_input.text())

        # Aqui você pode chamar a função principal do seu código e passar os valores inseridos

def run_interface():
    app = QApplication([])
    window = YourPluginInterface()
    window.show()
    app.exec_()

if __name__ == "__main__":
    run_interface()
